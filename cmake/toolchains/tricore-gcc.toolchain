set(CMAKE_CONFIGURATION_TYPES Debug Profile Release)
set(CMAKE_CONFIGURATION_TYPES "${CMAKE_CONFIGURATION_TYPES}" CACHE STRING "Build configurations")

macro(require_program VAR_NAME EXEC_PATH)
  find_program(${VAR_NAME} ${EXEC_PATH})
  if (NOT ${VAR_NAME})
    message(FATAL_ERROR "${EXEC_PATH} not found!")
  endif ()
endmacro()

# Specify target system and architecture
set(CMAKE_SYSTEM_NAME Generic)
set(CMAKE_SYSTEM_PROCESSOR tricore)

# Specify compiler toolchain and build tools
set(TOOLCHAIN_PREFIX tricore-elf)
set(CMAKE_LIBRARY_ARCHITECTURE ${TOOLCHAIN_PREFIX})
set(CMAKE_C_COMPILER_TARGET ${TOOLCHAIN_PREFIX})
set(CMAKE_CXX_COMPILER_TARGET ${TOOLCHAIN_PREFIX})

set(CMAKE_ASM_COMPILER ${TOOLCHAIN_PREFIX}-gcc)
set(CMAKE_C_COMPILER ${TOOLCHAIN_PREFIX}-gcc)
set(CMAKE_CXX_COMPILER ${TOOLCHAIN_PREFIX}-g++)
set(CMAKE_STRIP ${TOOLCHAIN_PREFIX}-strip;--strip-unused)
set(CMAKE_OBJCOPY ${TOOLCHAIN_PREFIX}-objcopy)
set(CMAKE_OBJDUMP ${TOOLCHAIN_PREFIX}-objdump)
set(CMAKE_LINKER ${TOOLCHAIN_PREFIX}-ld)
set(CMAKE_LD ${TOOLCHAIN_PREFIX}-ld)
set(CMAKE_AR ${TOOLCHAIN_PREFIX}-ar)
set(CMAKE_NM ${TOOLCHAIN_PREFIX}-nm)
set(CMAKE_RANLIB ${TOOLCHAIN_PREFIX}-ranlib)
set(CMAKE_SIZE ${TOOLCHAIN_PREFIX}-size)

# override the ARCHIVE command
set(CMAKE_C_ARCHIVE_CREATE "<CMAKE_AR> rcs <TARGET> <LINK_FLAGS> <OBJECTS>")
set(CMAKE_CXX_ARCHIVE_CREATE "<CMAKE_AR> rcs <TARGET> <LINK_FLAGS> <OBJECTS>")
set(CMAKE_ASM_ARCHIVE_CREATE "<CMAKE_AR> rcs <TARGET> <LINK_FLAGS> <OBJECTS>")

message(STATUS "CMAKE_ASM_COMPILER:             ${CMAKE_ASM_COMPILER}")
message(STATUS "CMAKE_C_COMPILER:               ${CMAKE_C_COMPILER}")
message(STATUS "CMAKE_CXX_COMPILER:             ${CMAKE_CXX_COMPILER}")
message(STATUS "CMAKE_STRIP:                    ${CMAKE_STRIP}")
message(STATUS "CMAKE_OBJCOPY:                  ${CMAKE_OBJCOPY}")
message(STATUS "CMAKE_OBJDUMP:                  ${CMAKE_OBJDUMP}")
message(STATUS "CMAKE_LINKER:                   ${CMAKE_LINKER}")
message(STATUS "CMAKE_LD:                       ${CMAKE_LD}")
message(STATUS "CMAKE_AR:                       ${CMAKE_AR}")
message(STATUS "CMAKE_NM:                       ${CMAKE_NM}")
message(STATUS "CMAKE_RANLIB:                   ${CMAKE_RANLIB}")
message(STATUS "CMAKE_SIZE:                     ${CMAKE_SIZE}")

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#

foreach (language C CXX)
    set(CMAKE_${language}_FLAGS "-std=gnu99 -pedantic -Wall -Wextra -Wshadow -mtc162 -fno-exceptions -fno-unwind-tables -fverbose-asm -fdata-sections -ffunction-sections")
    set(CMAKE_${language}_FLAGS_DEBUG "-O0 -g3")
    set(CMAKE_${language}_FLAGS_PROFILE "-DNDEBUG -O2 -g -fno-omit-frame-pointer")
    set(CMAKE_${language}_FLAGS_RELEASE "-DNDEBUG -O3")
    message(STATUS "CMAKE_${language}_FLAGS: ${CMAKE_${language}_FLAGS}")
    message(STATUS "CMAKE_${language}_FLAGS_DEBUG: ${CMAKE_${language}_FLAGS_DEBUG}")
    message(STATUS "CMAKE_${language}_FLAGS_PROFILE: ${CMAKE_${language}_FLAGS_PROFILE}")
    message(STATUS "CMAKE_${language}_FLAGS_RELEASE: ${CMAKE_${language}_FLAGS_RELEASE}")
endforeach ()

foreach (linker_type EXE SHARED MODULE)
    set(CMAKE_${linker_type}_LINKER_FLAGS "-Wl,--gc-sections,--no-warn-rwx-segments -T${CMAKE_CURRENT_LIST_DIR}/../../Lcf_Gnuc_Tricore_Tc.lsl -mtc162")
    message(STATUS "CMAKE_${linker_type}_LINKER_FLAGS: ${CMAKE_${linker_type}_LINKER_FLAGS}")
endforeach ()

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#

# Don't look in the sysroot for executables to run during the build
set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
# Only look in the sysroot (not in the host paths) for the rest
set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)

# This allows to have CMake test the compiler without linking
set(CMAKE_TRY_COMPILE_TARGET_TYPE "STATIC_LIBRARY")

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#

function(target_link_hex_output TARGET)
  add_custom_command(TARGET ${TARGET} POST_BUILD COMMAND ${CMAKE_OBJCOPY} $<TARGET_FILE:${TARGET}> -Oihex $<TARGET_FILE_DIR:${TARGET}>/$<TARGET_FILE_BASE_NAME:${TARGET}>.hex)
endfunction()

function(target_link_bin_output TARGET)
  add_custom_command(TARGET ${TARGET} POST_BUILD COMMAND ${CMAKE_OBJCOPY} $<TARGET_FILE:${TARGET}> -Obinary $<TARGET_FILE_DIR:${TARGET}>/$<TARGET_FILE_BASE_NAME:${TARGET}>.bin)
endfunction()

function(target_link_siz_output TARGET)
  add_custom_command(TARGET ${TARGET} POST_BUILD COMMAND ${CMAKE_SIZE} $<TARGET_FILE:${TARGET}>)
endfunction()

function(target_link_dis_output TARGET)
  add_custom_command(TARGET ${TARGET} POST_BUILD COMMAND ${CMAKE_OBJDUMP} -d $<TARGET_FILE:${TARGET}> > $<TARGET_FILE_DIR:${TARGET}>/$<TARGET_FILE_BASE_NAME:${TARGET}>.dis)
endfunction()

function(target_link_map_output TARGET)
  target_link_options(${TARGET} PRIVATE LINKER:-Map=$<TARGET_FILE_DIR:${TARGET}>/$<TARGET_FILE_BASE_NAME:${TARGET}>.map)
endfunction()

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
